import 'package:flutter/material.dart';

/// Represents the load mode for a specific operation.
class LoadMode {
  LoadMode._();

  /// factory method to create a class [LoadWhenCreated]
  factory LoadMode.whenCreated() = LoadWhenCreated;

  /// factory method to create a class [WhenInViewport]
  factory LoadMode.whenInViewport(
    Stream<ScrollPosition> checkIfInViewport, {
    int? pixelOffset,
  }) {
    return WhenInViewport(
      checkIfInViewport: checkIfInViewport,
      pixelOffset: pixelOffset,
    );
  }
}

/// Use this class to automatically load the ad when it's created in the native
/// code.
///
/// Use the factory method [LoadMode.whenCreated] to create it.
class LoadWhenCreated extends LoadMode {
  /// load the ad immediately when it's created.
  LoadWhenCreated() : super._();
}

/// Use this class to when you want to asynchronously load the ad and
/// additionally check if it's in the viewport (+- pixelOffset).
///
/// [checkIfInViewport] pass null events, to trigger checking if the
/// BannerAdView is in the viewport (+- pixelOffset).
/// For example, the events could be generated by a [NotificationListener],
/// so that on every scroll, you would check if the BannerAdView is in the
/// viewport. [pixelOffset] number of pixels that is used to calculate when to
/// load the ad. NOTE: Bear in mind, that the BannerAdView should be added to
/// the widget tree. So dynamic ListViews with a builder method could not
/// catch -1000px offsets, because the BannerAdView is not rendered/created yet.
/// Example values:
/// If set to 0, the ad will load when the widget will enter the viewport.
/// If set to -100, the ad will load -100 px before appearing on the screen.
/// If set to 100, the ad will load when 100 px of the ad could be shown.
///
/// Use the factory method [LoadMode.whenInViewport] to create it.
class WhenInViewport extends LoadMode {
  /// load ad when it's in the viewport
  WhenInViewport({required this.checkIfInViewport, int? pixelOffset})
    : assert(
        checkIfInViewport.isBroadcast,
        'The stream must be of broadcast type.',
      ),
      pixelOffset = pixelOffset ?? 0,
      super._();

  /// stream which should get new events when scrolling changes
  final Stream<ScrollPosition> checkIfInViewport;

  /// pixel offset determining when to load the ad
  final int pixelOffset;
}
